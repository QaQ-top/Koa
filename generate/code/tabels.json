{
  "TEST": {
    "prefix": "TEST",
    "body": [
      "import { Effect, ImmerReducer, Subscription, history } from 'umi';",
      "",
      "export interface ${2:name}ModelState {",
      "",
      "  query: {",
      "    username: string;",
      "    status: number | string;",
      "  },",
      "",
      "  pagination: {",
      "    current: number;",
      "    total: number;",
      "    pageSize: number;",
      "  };",
      "  dataList: any[];",
      "}",
      "",
      "export interface ${2:name}ModelType {",
      "  namespace: '${1:name}';",
      "  state: ${2:name}ModelState;",
      "  effects: {",
      "    [k: string]: Effect;",
      "  };",
      "  reducers: {",
      "    [k: string]: ImmerReducer<${2:name}ModelState>;",
      "  };",
      "  subscriptions: { setup: Subscription };",
      "}",
      "",
      "const ${2:name}Model: ${2:name}ModelType = {",
      "  namespace: '${1:name}',",
      "  state: {",
      "    query: {",
      "      username: '',",
      "      status: '',",
      "    },",
      "    pagination: {",
      "      current: 1,",
      "      total: 100,",
      "      pageSize: 10,",
      "    },",
      "    dataList: [],",
      "  },",
      "",
      "  effects: {",
      "    *getDataList({}, { call, put, select }) {",
      "      const { query, pagination }: ${2:name}ModelState = yield select((state: any) => state.${1:name})",
      "      try {",
      "        console.log(query, pagination)",
      "        const res = yield call(() => Promise.resolve());",
      "        yield put({",
      "          type: 'setDataList',",
      "          value: res?.body?.list || [{}],",
      "        });",
      "      } catch (e) {",
      "      } finally {",
      "      }",
      "    },",
      "  },",
      "",
      "  reducers: {",
      "    setState(state, { payload }) {},",
      "    setDataList(state, { value }) {",
      "      state.dataList = value;",
      "    },",
      "",
      "    setPagination(state, { pagination }) {",
      "      state.pagination = {",
      "        ...state.pagination,",
      "        ...pagination,",
      "      };",
      "    },",
      "    setQuery(state, { query }) {",
      "      state.query = {",
      "        ...state.query,",
      "        ...query,",
      "      };",
      "    },",
      "  },",
      "",
      "  subscriptions: {",
      "    setup({ dispatch, history }) {",
      "      return history.listen(async ({ pathname }) => {});",
      "    },",
      "  },",
      "};",
      "",
      "export default ${2:name}Model;",
      ""
    ],
    "description": "介绍"
  }
}